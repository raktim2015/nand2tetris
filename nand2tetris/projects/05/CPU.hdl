// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	


    Mux(a=true, b=instruction[5], sel=instruction[15], out=Aload);
    Mux(a=false, b=instruction[4], sel=instruction[15], out=Dload);
    Mux(a=false, b=instruction[3], sel=instruction[15], out=writeM);

    ARegister(in=insout, load=Aload, out=Aout);
    DRegister(in=aluout, load=Dload, out=Dout);
    Mux16(a=instruction, b=aluout, sel=instruction[15], out=insout);    // instruction MUX
    Mux16(a=Aout, b=inM, sel=instruction[12], out=inMout);    // inM MUX
    ALU(x=Dout, y=inMout, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluout, zr=zr, ng=ng);
    Or16(a=Aout, b=false, out[0..14]=addressM);

    // determine PC load
    Or(a=zr, b=ng, out=w1);
    Not(in=w1, out=line1);
    Not(in=ng, out=line3);
    Not(in=zr, out=line5);
    Or(a=zr, b=ng, out=line6);

    Mux(a=false, b=line1, sel=instruction[0], out=lev11);
    Mux(a=zr, b=line3, sel=instruction[0], out=lev12);
    Mux(a=ng, b=line5, sel=instruction[0], out=lev13);
    Mux(a=line6, b=true, sel=instruction[0], out=lev14);

    Mux(a=lev11, b=lev12, sel=instruction[1], out=lev21);
    Mux(a=lev13, b=lev14, sel=instruction[1], out=lev22);

    Mux(a=lev21, b=lev22, sel=instruction[2], out=PCloadtemp);
    Mux(a=false, b=PCloadtemp, sel=instruction[15], out=PCload);
    Not(in=PCload, out=PCinc);
    PC(in=Aout, load=PCload, inc=PCinc, reset=reset, out[0..14]=pc);

    Or16(a=aluout, b=aluout, out=outM);

}